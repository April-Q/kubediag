/*
Copyright 2020 The Kube Diagnoser Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package util

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net"
	"net/http"
	"net/url"
	"os/exec"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"syscall"
	"time"

	"github.com/go-logr/logr"
	"github.com/prometheus/common/model"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/util/sets"
	"sigs.k8s.io/controller-runtime/pkg/client"

	diagnosisv1 "netease.com/k8s/kube-diagnoser/api/v1"
	"netease.com/k8s/kube-diagnoser/pkg/types"
)

const (
	// PodInformationContextKey is the key of pod information in abnormal context.
	PodInformationContextKey = "podInformation"
	// ContainerInformationContextKey is the key of container information in abnormal context.
	ContainerInformationContextKey = "containerInformation"
	// ProcessInformationContextKey is the key of process information in abnormal context.
	ProcessInformationContextKey = "processInformation"
	// FilePathInformationContextKey is the key of file path information in abnormal context.
	FilePathInformationContextKey = "filePathInformation"
	// FileStatusInformationContextKey is the key of file information in abnormal context.
	FileStatusInformationContextKey = "fileStatusInformation"
	// SystemdUnitNameInformationContextKey is the key of systemd unit name information in abnormal context.
	SystemdUnitNameInformationContextKey = "systemdUnitNameInformationContextKey"
	// SystemdUnitPropertyInformationContextKey is the key of systemd unit property information in abnormal context.
	SystemdUnitPropertyInformationContextKey = "systemdUnitPropertyInformationContextKey"
	// PodDiskUsageDiagnosisContextKey is the key of pod disk usage diagnosis result in abnormal context.
	PodDiskUsageDiagnosisContextKey = "podDiskUsageDiagnosis"
	// TerminatingPodDiagnosisContextKey is the key of terminating pod diagnosis result in abnormal context.
	TerminatingPodDiagnosisContextKey = "terminatingPodDiagnosis"
	// SignalRecoveryContextKey is the key of process signal recovery details in abnormal context.
	SignalRecoveryContextKey = "signalRecovery"
	// MaxDataSize specifies max size of data which could be processed by kube diagnoser.
	// It is the message size limitation in grpc: https://github.com/grpc/grpc-go/blob/v1.30.0/clientconn.go#L95.
	MaxDataSize = 1024 * 1024 * 2
	// KubeletRunDirectory specifies the directory where the kubelet runtime information is stored.
	KubeletRunDirectory = "/var/lib/kubelet"
	// KubeletPodDirectory specifies the directory where the kubelet pod information is stored.
	KubeletPodDirectory = "/var/lib/kubelet/pods"
	// DefautlNamespace is the default namespace of kube diagnoser.
	DefautlNamespace = "kube-diagnoser"
	// DefautlPodCollector is the default name of pod collector.
	DefautlPodCollector = "pod-collector"
	// DefautlProcessCollector is the default name of process collector.
	DefautlProcessCollector = "process-collector"
	// DefautlTerminatingPodDiagnoser is the default name of terminating pod diagnoser.
	DefautlTerminatingPodDiagnoser = "terminating-pod-diagnoser"
	// DefautlSignalRecoverer is the default name of signal recoverer.
	DefautlSignalRecoverer = "signal-recoverer"
	// PrometheusAlertGeneratedAbnormalPrefix is the name prefix for abnormals generated by prometheus alerts.
	PrometheusAlertGeneratedAbnormalPrefix = "prometheus-alert"
	// KubernetesEventGeneratedAbnormalPrefix is the name prefix for abnormals generated by kubernetes events.
	KubernetesEventGeneratedAbnormalPrefix = "kubernetes-event"
	// PodKillGracePeriodSeconds is the duration in seconds after the pod is forcibly halted
	// with a kill signal and the time when the pod is taken as an abormal pod.
	PodKillGracePeriodSeconds = 30
	// TerminatingPodAbnormalNamePrefix is the name prefix for creating terminating pod abnormal.
	TerminatingPodAbnormalNamePrefix = "terminating-pod"
)

// UpdateAbnormalCondition updates existing abnormal condition or creates a new one. Sets
// LastTransitionTime to now if the status has changed.
// Returns true if abnormal condition has changed or has been added.
func UpdateAbnormalCondition(status *diagnosisv1.AbnormalStatus, condition *diagnosisv1.AbnormalCondition) bool {
	condition.LastTransitionTime = metav1.Now()
	// Try to find this abnormal condition.
	conditionIndex, oldCondition := GetAbnormalCondition(status, condition.Type)

	if oldCondition == nil {
		// We are adding new abnormal condition.
		status.Conditions = append(status.Conditions, *condition)
		return true
	}

	// We are updating an existing condition, so we need to check if it has changed.
	if condition.Status == oldCondition.Status {
		condition.LastTransitionTime = oldCondition.LastTransitionTime
	}

	isEqual := condition.Status == oldCondition.Status &&
		condition.Reason == oldCondition.Reason &&
		condition.Message == oldCondition.Message &&
		condition.LastTransitionTime.Equal(&oldCondition.LastTransitionTime)

	status.Conditions[conditionIndex] = *condition

	// Return true if one of the fields have changed.
	return !isEqual
}

// GetAbnormalCondition extracts the provided condition from the given status.
// Returns -1 and nil if the condition is not present, otherwise returns the index of the located condition.
func GetAbnormalCondition(status *diagnosisv1.AbnormalStatus, conditionType diagnosisv1.AbnormalConditionType) (int, *diagnosisv1.AbnormalCondition) {
	if status == nil {
		return -1, nil
	}

	return GetAbnormalConditionFromList(status.Conditions, conditionType)
}

// GetAbnormalConditionFromList extracts the provided condition from the given list of condition and
// returns the index of the condition and the condition. Returns -1 and nil if the condition is not present.
func GetAbnormalConditionFromList(conditions []diagnosisv1.AbnormalCondition, conditionType diagnosisv1.AbnormalConditionType) (int, *diagnosisv1.AbnormalCondition) {
	if conditions == nil {
		return -1, nil
	}
	for i := range conditions {
		if conditions[i].Type == conditionType {
			return i, &conditions[i]
		}
	}

	return -1, nil
}

// GetPodUnhealthyReason extracts the reason of terminated or waiting container in the pod if the pod is
// not ready. The parameter must be an unhealthy pod.
// It returns the reason of the first terminated or waiting container.
func GetPodUnhealthyReason(pod corev1.Pod) string {
	// Return the reason of the first terminated or waiting container.
	for _, containerStatus := range pod.Status.ContainerStatuses {
		// Skip ready containers.
		if containerStatus.Ready {
			continue
		}

		if containerStatus.State.Terminated != nil {
			return containerStatus.State.Terminated.Reason
		} else if containerStatus.State.Waiting != nil {
			return containerStatus.State.Waiting.Reason
		}
	}

	// Return the reason of the first unready container if last termination state is documented.
	for _, containerStatus := range pod.Status.ContainerStatuses {
		// Skip ready containers.
		if containerStatus.Ready {
			continue
		}

		if containerStatus.LastTerminationState.Terminated != nil {
			return containerStatus.LastTerminationState.Terminated.Reason
		}
	}

	// The pod unhealthy reason will be Unknown if no unhealthy container status is reported.
	return "Unknown"
}

// UpdatePodUnhealthyReasonStatistics updates container state reason map of unhealthy pods.
// It returns true if the reason is not empty, otherwise false.
func UpdatePodUnhealthyReasonStatistics(containerStateReasons map[string]int, reason string) bool {
	if containerStateReasons == nil {
		containerStateReasons = make(map[string]int)
	}

	if reason == "" {
		return false
	}
	containerStateReasons[reason]++

	return true
}

// IsNodeReady returns true if its Ready condition is set to true and it does not have NetworkUnavailable
// condition set to true.
func IsNodeReady(node corev1.Node) bool {
	nodeReady := false
	networkReady := true
	for _, condition := range node.Status.Conditions {
		if condition.Type == corev1.NodeReady {
			if condition.Status == corev1.ConditionTrue {
				nodeReady = true
			}
		}
		if condition.Type == corev1.NodeNetworkUnavailable {
			if condition.Status == corev1.ConditionTrue {
				networkReady = false
			}
		}
	}

	return nodeReady && networkReady
}

// GetNodeUnhealthyConditionType extracts the condition type of unhealthy node. The parameter must be an
// unhealthy node.
// It returns the type of the first unhealthy condition.
func GetNodeUnhealthyConditionType(node corev1.Node) corev1.NodeConditionType {
	for _, condition := range node.Status.Conditions {
		// Return the reason of the first unhealthy condition.
		if condition.Type != corev1.NodeReady && condition.Status == corev1.ConditionTrue {
			return condition.Type
		}
	}

	// The node condition will be Unknown if no unhealthy condition is reported.
	return "Unknown"
}

// FormatURL formats a URL from args.
func FormatURL(scheme string, host string, port string, path string) *url.URL {
	u, err := url.Parse(path)
	// Something is busted with the path, but it's too late to reject it. Pass it along as is.
	if err != nil {
		u = &url.URL{
			Path: path,
		}
	}

	u.Scheme = scheme
	u.Host = net.JoinHostPort(host, port)

	return u
}

// DoHTTPRequestWithAbnormal sends a http request to diagnoser, recoverer or information collector with payload of abnormal.
// It returns an Abnormal and an error as results.
func DoHTTPRequestWithAbnormal(abnormal diagnosisv1.Abnormal, url *url.URL, cli http.Client, log logr.Logger) (diagnosisv1.Abnormal, error) {
	data, err := json.Marshal(abnormal)
	if err != nil {
		return abnormal, err
	}

	req, err := http.NewRequest("POST", url.String(), bytes.NewBuffer(data))
	if err != nil {
		return abnormal, err
	}

	res, err := cli.Do(req)
	if err != nil {
		return abnormal, err
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Error(err, "failed to read http response body", "response", string(body))
		return abnormal, err
	}

	// Return error if abnormal size exceeds max data size.
	if len(body) > MaxDataSize {
		return abnormal, fmt.Errorf("abnormal data size %d exceeds max data size %d", len(body), MaxDataSize)
	}

	if res.StatusCode == http.StatusOK {
		err = json.Unmarshal(body, &abnormal)
		if err != nil {
			log.Error(err, "failed to marshal response body", "response", string(body))
			return abnormal, err
		}

		log.Info("succeed to complete http request", "abnormal", client.ObjectKey{
			Name:      abnormal.Name,
			Namespace: abnormal.Namespace,
		}, "status", res.Status)
		return abnormal, nil
	}

	log.Info("failed to complete http request", "status", res.Status, "response", string(body))
	return abnormal, fmt.Errorf("failed with status: %s", res.Status)
}

// ListPodsFromPodInformationContext lists all pods on the node by retrieving context in abnormal.
func ListPodsFromPodInformationContext(abnormal diagnosisv1.Abnormal, log logr.Logger) ([]corev1.Pod, error) {
	log.Info("listing pods")

	// Retrieve value from status context if context key is not found in spec context.
	data, err := GetAbnormalSpecContext(abnormal, PodInformationContextKey)
	if err != nil {
		data, err = GetAbnormalStatusContext(abnormal, PodInformationContextKey)
		if err != nil {
			return nil, err
		}
	}

	var pods []corev1.Pod
	err = json.Unmarshal(data, &pods)
	if err != nil {
		return nil, err
	}

	return pods, nil
}

// ListFilePathsFromFilePathInformationContext lists file paths by retrieving context in abnormal.
func ListFilePathsFromFilePathInformationContext(abnormal diagnosisv1.Abnormal, log logr.Logger) ([]string, error) {
	log.Info("listing file paths")

	// Retrieve value from status context if context key is not found in spec context.
	data, err := GetAbnormalSpecContext(abnormal, FilePathInformationContextKey)
	if err != nil {
		data, err = GetAbnormalStatusContext(abnormal, FilePathInformationContextKey)
		if err != nil {
			return nil, err
		}
	}

	var filepaths []string
	err = json.Unmarshal(data, &filepaths)
	if err != nil {
		return nil, err
	}

	return filepaths, nil
}

// ListProcessesFromProcessInformationContext list processes by retrieving context in abnormal.
func ListProcessesFromProcessInformationContext(abnormal diagnosisv1.Abnormal, log logr.Logger) ([]types.Process, error) {
	log.Info("listing processes")

	// Retrieve value from status context if context key is not found in spec context.
	data, err := GetAbnormalSpecContext(abnormal, ProcessInformationContextKey)
	if err != nil {
		data, err = GetAbnormalStatusContext(abnormal, ProcessInformationContextKey)
		if err != nil {
			return nil, err
		}
	}

	var processes []types.Process
	err = json.Unmarshal(data, &processes)
	if err != nil {
		return nil, err
	}

	return processes, nil
}

// ListSystemdUnitNamesFromProcessInformationContext list systemd unit names by retrieving context in abnormal.
func ListSystemdUnitNamesFromProcessInformationContext(abnormal diagnosisv1.Abnormal, log logr.Logger) ([]string, error) {
	log.Info("listing systemd unit names")

	// Retrieve value from status context if context key is not found in spec context.
	data, err := GetAbnormalSpecContext(abnormal, SystemdUnitNameInformationContextKey)
	if err != nil {
		data, err = GetAbnormalStatusContext(abnormal, SystemdUnitNameInformationContextKey)
		if err != nil {
			return nil, err
		}
	}

	var units []string
	err = json.Unmarshal(data, &units)
	if err != nil {
		return nil, err
	}

	return units, nil
}

// ListSignalsFromSignalRecoveryContext list process signal details by retrieving context in abnormal.
func ListSignalsFromSignalRecoveryContext(abnormal diagnosisv1.Abnormal, log logr.Logger) (types.SignalList, error) {
	log.Info("listing signals")

	// Retrieve value from status context if context key is not found in spec context.
	data, err := GetAbnormalSpecContext(abnormal, SignalRecoveryContextKey)
	if err != nil {
		data, err = GetAbnormalStatusContext(abnormal, SignalRecoveryContextKey)
		if err != nil {
			return nil, err
		}
	}

	var signals types.SignalList
	err = json.Unmarshal(data, &signals)
	if err != nil {
		return nil, err
	}

	return signals, nil
}

// ValidateAbnormalResult validates an abnormal after processed by a diagnoser, recoverer or information collector.
// The following fields must not be modified after processed:
//
// Spec
// Status.Identifiable
// Status.Recoverable
// Status.Phase
// Status.Conditions
// Status.Message
// Status.Reason
// Status.StartTime
// Status.Diagnoser
// Status.Recoverer
func ValidateAbnormalResult(result diagnosisv1.Abnormal, current diagnosisv1.Abnormal) error {
	if !reflect.DeepEqual(result.Spec, current.Spec) {
		return fmt.Errorf("spec field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.Identifiable, current.Status.Identifiable) {
		return fmt.Errorf("identifiable field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.Recoverable, current.Status.Recoverable) {
		return fmt.Errorf("recoverable field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.Phase, current.Status.Phase) {
		return fmt.Errorf("phase field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.Conditions, current.Status.Conditions) {
		return fmt.Errorf("conditions field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.Message, current.Status.Message) {
		return fmt.Errorf("message field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.Reason, current.Status.Reason) {
		return fmt.Errorf("reason field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.StartTime, current.Status.StartTime) {
		return fmt.Errorf("startTime field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.Diagnoser, current.Status.Diagnoser) {
		return fmt.Errorf("diagnoser field of Abnormal must not be modified")
	}
	if !reflect.DeepEqual(result.Status.Recoverer, current.Status.Recoverer) {
		return fmt.Errorf("recoverer field of Abnormal must not be modified")
	}

	return nil
}

// QueueAbnormal sends an abnormal to a channel. It returns an error if the channel is blocked.
func QueueAbnormal(ctx context.Context, channel chan diagnosisv1.Abnormal, abnormal diagnosisv1.Abnormal) error {
	select {
	case <-ctx.Done():
		return nil
	case channel <- abnormal:
		return nil
	default:
		return fmt.Errorf("channel is blocked")
	}
}

// QueueAbnormalWithTimer sends an abnormal to a channel after a timer expires.
func QueueAbnormalWithTimer(ctx context.Context, duration time.Duration, channel chan diagnosisv1.Abnormal, abnormal diagnosisv1.Abnormal) error {
	timer := time.NewTimer(duration)
	select {
	case <-ctx.Done():
		return nil
	case <-timer.C:
		return QueueAbnormal(ctx, channel, abnormal)
	}
}

// QueueEvent sends an event to a channel. It returns an error if the channel is blocked.
func QueueEvent(ctx context.Context, channel chan corev1.Event, event corev1.Event) error {
	select {
	case <-ctx.Done():
		return nil
	case channel <- event:
		return nil
	default:
		return fmt.Errorf("channel is blocked")
	}
}

// IsAbnormalNodeNameMatched checks if the abnormal is on the specific node.
// It returns true if node name of the abnormal is empty or matches provided node name, otherwise false.
func IsAbnormalNodeNameMatched(abnormal diagnosisv1.Abnormal, nodeName string) bool {
	return abnormal.Spec.NodeName == "" || abnormal.Spec.NodeName == nodeName
}

// SetAbnormalSpecContext sets spec context field of an abnormal with provided key and value.
func SetAbnormalSpecContext(abnormal diagnosisv1.Abnormal, key string, value interface{}) (diagnosisv1.Abnormal, error) {
	if abnormal.Spec.Context == nil {
		abnormal.Spec.Context = new(runtime.RawExtension)
	}
	current, err := abnormal.Spec.Context.MarshalJSON()
	if err != nil {
		return abnormal, err
	}

	// Parsed context will be nil if raw data is empty.
	// Use map[string]interface{} instead of map[string][]byte for readability in json or yaml format.
	context := make(map[string]interface{})
	err = json.Unmarshal(current, &context)
	if err != nil {
		return abnormal, err
	}

	// Reinitialize context if context is nil.
	if context == nil {
		context = make(map[string]interface{})
	}
	context[key] = value
	result, err := json.Marshal(context)
	if err != nil {
		return abnormal, err
	}

	err = abnormal.Spec.Context.UnmarshalJSON(result)
	if err != nil {
		return abnormal, err
	}

	return abnormal, nil
}

// SetAbnormalStatusContext sets status context field of an abnormal with provided key and value.
func SetAbnormalStatusContext(abnormal diagnosisv1.Abnormal, key string, value interface{}) (diagnosisv1.Abnormal, error) {
	if abnormal.Status.Context == nil {
		abnormal.Status.Context = new(runtime.RawExtension)
	}
	current, err := abnormal.Status.Context.MarshalJSON()
	if err != nil {
		return abnormal, err
	}

	// Parsed context will be nil if raw data is empty.
	// Use map[string]interface{} instead of map[string][]byte for readability in json or yaml format.
	context := make(map[string]interface{})
	err = json.Unmarshal(current, &context)
	if err != nil {
		return abnormal, err
	}

	// Reinitialize context if context is nil.
	if context == nil {
		context = make(map[string]interface{})
	}
	context[key] = value
	result, err := json.Marshal(context)
	if err != nil {
		return abnormal, err
	}

	err = abnormal.Status.Context.UnmarshalJSON(result)
	if err != nil {
		return abnormal, err
	}

	return abnormal, nil
}

// GetAbnormalSpecContext gets spec context field of an abnormal with provided key.
func GetAbnormalSpecContext(abnormal diagnosisv1.Abnormal, key string) ([]byte, error) {
	if abnormal.Spec.Context == nil {
		return nil, fmt.Errorf("abnormal spec context nil")
	}
	current, err := abnormal.Spec.Context.MarshalJSON()
	if err != nil {
		return nil, err
	}

	// Parsed context will be nil if raw data is empty.
	context := make(map[string]interface{})
	err = json.Unmarshal(current, &context)
	if err != nil {
		return nil, err
	}

	// Return error if abnormal spec context is empty.
	if context == nil {
		return nil, fmt.Errorf("abnormal spec context empty")
	}
	value, ok := context[key]
	if !ok {
		return nil, fmt.Errorf("spec context key not exist: %s", key)
	}

	result, err := json.Marshal(value)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// GetAbnormalStatusContext gets status context field of an abnormal with provided key.
func GetAbnormalStatusContext(abnormal diagnosisv1.Abnormal, key string) ([]byte, error) {
	if abnormal.Status.Context == nil {
		return nil, fmt.Errorf("abnormal status context nil")
	}
	current, err := abnormal.Status.Context.MarshalJSON()
	if err != nil {
		return nil, err
	}

	// Parsed context will be nil if raw data is empty.
	context := make(map[string]interface{})
	err = json.Unmarshal(current, &context)
	if err != nil {
		return nil, err
	}

	// Return error if abnormal status context is empty.
	if context == nil {
		return nil, fmt.Errorf("abnormal status context empty")
	}
	value, ok := context[key]
	if !ok {
		return nil, fmt.Errorf("status context key not exist: %s", key)
	}

	result, err := json.Marshal(value)
	if err != nil {
		return nil, err
	}

	return result, nil
}

// RemoveAbnormalSpecContext removes spec context field of an abnormal with provided key.
func RemoveAbnormalSpecContext(abnormal diagnosisv1.Abnormal, key string) (diagnosisv1.Abnormal, bool, error) {
	if abnormal.Spec.Context == nil {
		return abnormal, true, nil
	}
	current, err := abnormal.Spec.Context.MarshalJSON()
	if err != nil {
		return abnormal, false, err
	}

	// Parsed context will be nil if raw data is empty.
	context := make(map[string]interface{})
	err = json.Unmarshal(current, &context)
	if err != nil {
		return abnormal, false, err
	}

	// Delete value with provided key from context.
	if context == nil {
		return abnormal, true, nil
	}
	delete(context, key)

	result, err := json.Marshal(context)
	if err != nil {
		return abnormal, false, err
	}

	err = abnormal.Spec.Context.UnmarshalJSON(result)
	if err != nil {
		return abnormal, false, err
	}

	return abnormal, true, nil
}

// RemoveAbnormalStatusContext removes status context field of an abnormal with provided key.
func RemoveAbnormalStatusContext(abnormal diagnosisv1.Abnormal, key string) (diagnosisv1.Abnormal, bool, error) {
	if abnormal.Status.Context == nil {
		return abnormal, true, nil
	}
	current, err := abnormal.Status.Context.MarshalJSON()
	if err != nil {
		return abnormal, false, err
	}

	// Parsed context will be nil if raw data is empty.
	context := make(map[string]interface{})
	err = json.Unmarshal(current, &context)
	if err != nil {
		return abnormal, false, err
	}

	// Delete value with provided key from context.
	if context == nil {
		return abnormal, true, nil
	}
	delete(context, key)

	result, err := json.Marshal(context)
	if err != nil {
		return abnormal, false, err
	}

	err = abnormal.Status.Context.UnmarshalJSON(result)
	if err != nil {
		return abnormal, false, err
	}

	return abnormal, true, nil
}

// RetrievePodsOnNode retrieves all pods on the provided node.
func RetrievePodsOnNode(pods []corev1.Pod, nodeName string) []corev1.Pod {
	podsOnNode := make([]corev1.Pod, 0)
	for _, pod := range pods {
		if pod.Spec.NodeName == nodeName {
			podsOnNode = append(podsOnNode, pod)
		}
	}

	return podsOnNode
}

// RetrieveAbnormalsOnNode retrieves all abnormals on the provided node.
func RetrieveAbnormalsOnNode(abnormals []diagnosisv1.Abnormal, nodeName string) []diagnosisv1.Abnormal {
	abnormalsOnNode := make([]diagnosisv1.Abnormal, 0)
	for _, abnormal := range abnormals {
		if abnormal.Spec.NodeName == nodeName {
			abnormalsOnNode = append(abnormalsOnNode, abnormal)
		}
	}

	return abnormalsOnNode
}

// GetTotalBytes gets total bytes in filesystem.
func GetTotalBytes(path string) uint64 {
	var stat syscall.Statfs_t
	syscall.Statfs(path, &stat)

	return stat.Blocks * uint64(stat.Bsize)
}

// GetFreeBytes gets free bytes in filesystem.
func GetFreeBytes(path string) uint64 {
	var stat syscall.Statfs_t
	syscall.Statfs(path, &stat)

	return stat.Bfree * uint64(stat.Bsize)
}

// GetAvailableBytes gets available bytes in filesystem.
func GetAvailableBytes(path string) uint64 {
	var stat syscall.Statfs_t
	syscall.Statfs(path, &stat)

	return stat.Bavail * uint64(stat.Bsize)
}

// GetUsedBytes gets used bytes in filesystem.
func GetUsedBytes(path string) uint64 {
	var stat syscall.Statfs_t
	syscall.Statfs(path, &stat)

	return (stat.Blocks - stat.Bfree) * uint64(stat.Bsize)
}

// RunCommandExecutor runs the command with timeout and updates the result into command executor.
func RunCommandExecutor(commandExecutorSpec diagnosisv1.CommandExecutorSpec, log logr.Logger) (diagnosisv1.CommandExecutorStatus, error) {
	commandExecutorStatus := diagnosisv1.CommandExecutorStatus{
		Command: commandExecutorSpec.Command,
		Type:    commandExecutorSpec.Type,
	}

	if len(commandExecutorSpec.Command) < 1 {
		err := fmt.Errorf("invalid command")
		commandExecutorStatus.Error = err.Error()
		return commandExecutorStatus, err
	}

	var buf bytes.Buffer
	command := exec.Command(commandExecutorSpec.Command[0], commandExecutorSpec.Command[1:]...)
	// Setting a new process group id to avoid suicide.
	command.SysProcAttr = &syscall.SysProcAttr{Setpgid: true}
	command.Stdout = &buf
	command.Stderr = &buf
	err := command.Start()
	if err != nil {
		commandExecutorStatus.Error = err.Error()
		return commandExecutorStatus, err
	}

	// Wait and signal completion of command.
	done := make(chan error)
	go func() {
		done <- command.Wait()
	}()

	timeout := time.After(time.Duration(commandExecutorSpec.TimeoutSeconds) * time.Second)
	select {
	// Kill the process if timeout happened.
	case <-timeout:
		// Kill the process and all of its children with its process group id.
		pgid, err := syscall.Getpgid(command.Process.Pid)
		if err != nil {
			log.Error(err, "failed to get process group id on command timed out", "command", commandExecutorSpec.Command)
		} else {
			err = syscall.Kill(-pgid, syscall.SIGKILL)
			if err != nil {
				log.Error(err, "failed to kill process on command timed out", "command", commandExecutorSpec.Command)
			}
		}

		err = fmt.Errorf("command %v timed out", commandExecutorSpec.Command)
		commandExecutorStatus.Error = err.Error()
		return commandExecutorStatus, fmt.Errorf("command %v timed out", commandExecutorSpec.Command)
	// Set output and error if command completed before timeout.
	case err := <-done:
		if err != nil {
			commandExecutorStatus.Stderr = buf.String()
			commandExecutorStatus.Error = err.Error()
		} else {
			commandExecutorStatus.Stdout = buf.String()
		}
	}

	return commandExecutorStatus, nil
}

// RunProfiler runs profiling and updates the result into profiler.
func RunProfiler(ctx context.Context, name string, namespace string, profilerSpec diagnosisv1.ProfilerSpec, cli client.Client, log logr.Logger) (diagnosisv1.ProfilerStatus, error) {
	profilerStatus := diagnosisv1.ProfilerStatus{
		Name: profilerSpec.Name,
		Type: profilerSpec.Type,
	}

	switch {
	case profilerSpec.Go != nil:
		endpoint, errCh := RunGoProfiler(*profilerSpec.Go, profilerSpec.TimeoutSeconds, log)
		// Update error of go profiler asynchronously if any error happens on running go profiling command.
		go func() {
			profilerErr := <-errCh
			if profilerErr != nil {
				var abnormal diagnosisv1.Abnormal
				if err := cli.Get(ctx, client.ObjectKey{
					Name:      name,
					Namespace: namespace,
				}, &abnormal); err != nil {
					log.Error(err, "unable to fetch Abnormal", "abnormal", client.ObjectKey{
						Name:      name,
						Namespace: namespace,
					})
					return
				}

				// Set error of go profiler.
				for i := 0; i < len(abnormal.Status.Profilers); i++ {
					if abnormal.Status.Profilers[i].Name == profilerSpec.Name {
						abnormal.Status.Profilers[i].Error = profilerErr.Error()
						break
					}
				}

				log.Error(profilerErr, "error on running go profiler")

				if err := cli.Status().Update(ctx, &abnormal); err != nil {
					log.Error(err, "unable to update Abnormal")
				}
			}
		}()

		// Set http endpoint of go profiling interactive web interface.
		profilerStatus.Endpoint = endpoint
	default:
		err := fmt.Errorf("profiler not specified")
		profilerStatus.Error = err.Error()
		return profilerStatus, err
	}

	return profilerStatus, nil
}

// RunGoProfiler runs go profiling with timeout and updates the result into go profiler. A goroutine is
// spawned for updating error status of go profiling command asynchronously. An error will be sent to the
// error channel if any error happens on running go profiling command. The error channel must be nonblocking.
// It returns an http endpoint string an the error channel as results.
func RunGoProfiler(goProfiler diagnosisv1.GoProfiler, timeoutSeconds int32, log logr.Logger) (string, chan error) {
	errCh := make(chan error, 1)
	port, err := GetAvailablePort()
	if err != nil {
		errCh <- fmt.Errorf("unable to get available port for go profiler")
		return "", errCh
	}
	endpoint := fmt.Sprintf("0.0.0.0:%d", port)

	var buf bytes.Buffer
	command := exec.Command("go", "tool", "pprof", "-no_browser", fmt.Sprintf("-http=%s", endpoint), goProfiler.Source)
	// Setting a new process group id to avoid suicide.
	command.SysProcAttr = &syscall.SysProcAttr{Setpgid: true}
	command.Stdout = &buf
	command.Stderr = &buf
	err = command.Start()
	if err != nil {
		errCh <- err
		return endpoint, errCh
	}

	log.Info("running go profiler", "source", goProfiler.Source, "endpoint", endpoint)

	// Wait and signal completion of go profiler.
	done := make(chan error)
	go func() {
		done <- command.Wait()
	}()
	go func() {
		timeout := time.After(time.Duration(timeoutSeconds) * time.Second)
		select {
		// Kill the process if timeout happened.
		case <-timeout:
			// Kill the process and all of its children with its process group id.
			pgid, err := syscall.Getpgid(command.Process.Pid)
			if err != nil {
				log.Error(err, "failed to get process group id on go profiler timed out", "source", goProfiler.Source)
			} else {
				err = syscall.Kill(-pgid, syscall.SIGKILL)
				if err != nil {
					log.Error(err, "failed to kill process on go profiler timed out", "source", goProfiler.Source)
				}
			}
			errCh <- fmt.Errorf("go profiler on source %v timed out", goProfiler.Source)
		// Send error if go profiler completed before timeout.
		case err := <-done:
			if err != nil {
				errCh <- err
			}
		}
	}()

	return endpoint, errCh
}

// SystemdUnitProperties returns a slice which contains all properties of specified systemd unit.
// See systemctl(1) linux manual page for more details:
//
// https://www.man7.org/linux/man-pages/man1/systemctl.1.html
func SystemdUnitProperties(name string) ([]types.Property, error) {
	command := make([]string, 0)
	// Get properties of the manager itself if systemd unit name is empty.
	if name == "" {
		command = []string{"nsenter", "-t", "1", "-m", "-p", "-n", "-i", "-u", "systemctl", "show", "--no-page"}
	} else {
		command = []string{"nsenter", "-t", "1", "-m", "-p", "-n", "-i", "-u", "systemctl", "show", "--no-page", name}
	}

	out, err := BlockingRunCommandWithTimeout(command, 10)
	if err != nil {
		return nil, fmt.Errorf("execute command systemctl on unit %s with error %v", name, err)
	}

	buf := bytes.NewBuffer(out)
	properties, err := types.ParseProperties(buf)
	if err != nil {
		return nil, err
	}

	return properties, nil
}

// DiskUsage calculates the disk usage of a directory by executing "du" command.
func DiskUsage(path string) (int, error) {
	// Uses the same niceness level as cadvisor.fs does when running "du".
	// Uses -B 1 to always scale to a blocksize of 1 byte.
	// Set 10 seconds timeout for "du" command.
	command := []string{"nice", "-n", "19", "du", "-s", "-B", "1", path}
	out, err := BlockingRunCommandWithTimeout(command, 60)
	if err != nil {
		return 0, fmt.Errorf("execute command du ($ nice -n 19 du -s -B 1) on path %s with error %v", path, err)
	}

	size, err := strconv.Atoi(strings.Fields(string(out))[0])
	if err != nil {
		return 0, fmt.Errorf("unable to parse du output %s due to error %v", out, err)
	}

	return size, nil
}

// BlockingRunCommandWithTimeout executes command in blocking mode with timeout seconds.
func BlockingRunCommandWithTimeout(command []string, timeoutSeconds int32) ([]byte, error) {
	timeoutCommand := []string{"timeout", fmt.Sprintf("%ds", timeoutSeconds)}
	timeoutCommand = append(timeoutCommand, command...)
	out, err := exec.Command(timeoutCommand[0], timeoutCommand[1:]...).CombinedOutput()
	if err != nil {
		return out, err
	}

	return out, nil
}

// GetAvailablePort returns a free open port that is ready to use.
func GetAvailablePort() (int, error) {
	addr, err := net.ResolveTCPAddr("tcp", "0.0.0.0:0")
	if err != nil {
		return 0, err
	}

	l, err := net.ListenTCP("tcp", addr)
	if err != nil {
		return 0, err
	}
	defer l.Close()

	return l.Addr().(*net.TCPAddr).Port, nil
}

// ValidateProfilerSpecs tests that all specified ProfilerSpecs has valid data.
func ValidateProfilerSpecs(profilerSpecs []diagnosisv1.ProfilerSpec) error {
	allNames := sets.String{}
	for _, profilerSpec := range profilerSpecs {
		if allNames.Has(profilerSpec.Name) {
			return fmt.Errorf("duplicated profiler name: %s", profilerSpec.Name)
		}
		allNames.Insert(profilerSpec.Name)
	}

	return nil
}

// MatchPrometheusAlert reports whether the abnormal contains all match of the regular expression pattern
// defined in prometheus alert template.
func MatchPrometheusAlert(prometheusAlertTemplate diagnosisv1.PrometheusAlertTemplate, abnormal diagnosisv1.Abnormal) (bool, error) {
	re, err := regexp.Compile(prometheusAlertTemplate.Regexp.AlertName)
	if err != nil {
		return false, err
	}
	if !re.MatchString(string(abnormal.Spec.PrometheusAlert.Labels[model.AlertNameLabel])) {
		return false, nil
	}

	// Template label key must be identical to the prometheus alert label key.
	// Template label value should be a regular expression.
	for templateKey, templateValue := range prometheusAlertTemplate.Regexp.Labels {
		value, ok := abnormal.Spec.PrometheusAlert.Labels[templateKey]
		if !ok {
			return false, nil
		}

		re, err := regexp.Compile(string(templateValue))
		if err != nil {
			return false, err
		}
		if !re.MatchString(string(value)) {
			return false, nil
		}
	}

	// Template annotation key must be identical to the prometheus alert annotation key.
	// Template annotation value should be a regular expression.
	for templateKey, templateValue := range prometheusAlertTemplate.Regexp.Annotations {
		value, ok := abnormal.Spec.PrometheusAlert.Annotations[templateKey]
		if !ok {
			return false, nil
		}

		re, err := regexp.Compile(string(templateValue))
		if err != nil {
			return false, err
		}
		if !re.MatchString(string(value)) {
			return false, nil
		}
	}

	re, err = regexp.Compile(prometheusAlertTemplate.Regexp.StartsAt)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.PrometheusAlert.StartsAt.String()) {
		return false, nil
	}

	re, err = regexp.Compile(prometheusAlertTemplate.Regexp.EndsAt)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.PrometheusAlert.EndsAt.String()) {
		return false, nil
	}

	re, err = regexp.Compile(prometheusAlertTemplate.Regexp.GeneratorURL)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.PrometheusAlert.GeneratorURL) {
		return false, nil
	}

	return true, nil
}

// MatchKubernetesEvent reports whether the abnormal contains all match of the regular expression pattern
// defined in kubernetes event template.
func MatchKubernetesEvent(kubernetesEventTemplate diagnosisv1.KubernetesEventTemplate, abnormal diagnosisv1.Abnormal) (bool, error) {
	re, err := regexp.Compile(kubernetesEventTemplate.Regexp.Name)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.Name) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.Namespace)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.Namespace) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.InvolvedObject.Kind)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.InvolvedObject.Kind) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.InvolvedObject.Namespace)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.InvolvedObject.Namespace) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.InvolvedObject.Name)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.InvolvedObject.Name) {
		return false, nil
	}

	re, err = regexp.Compile(string(kubernetesEventTemplate.Regexp.InvolvedObject.UID))
	if err != nil {
		return false, err
	}
	if !re.MatchString(string(abnormal.Spec.KubernetesEvent.InvolvedObject.UID)) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.InvolvedObject.APIVersion)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.InvolvedObject.APIVersion) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.InvolvedObject.ResourceVersion)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.InvolvedObject.ResourceVersion) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.InvolvedObject.FieldPath)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.InvolvedObject.FieldPath) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.Reason)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.Reason) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.Message)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.Message) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.Source.Component)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.Source.Component) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.Source.Host)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.Source.Host) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.FirstTimestamp)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.FirstTimestamp.String()) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.LastTimestamp)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.LastTimestamp.String()) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.Count)
	if err != nil {
		return false, err
	}
	if !re.MatchString(strconv.Itoa(int(abnormal.Spec.KubernetesEvent.Count))) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.Type)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.Type) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.Action)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.Action) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.ReportingController)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.ReportingController) {
		return false, nil
	}

	re, err = regexp.Compile(kubernetesEventTemplate.Regexp.ReportingInstance)
	if err != nil {
		return false, err
	}
	if !re.MatchString(abnormal.Spec.KubernetesEvent.ReportingInstance) {
		return false, nil
	}

	return true, nil
}
