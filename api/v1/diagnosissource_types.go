/*
Copyright 2020 The Kube Diagnoser Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DiagnosisSourceSpec defines the desired state of DiagnosisSource.
type DiagnosisSourceSpec struct {
	// SourceTemplate is the template of diagnosis source. An diagnosis source generates diagnosis
	// according to the template.
	SourceTemplate SourceTemplate `json:"sourceTemplate"`
	// AssignedInformationCollectors is the list of information collectors to execute
	// information collecting logics. Diagnoses generated by the source contains predefined
	// information collectors.
	// +optional
	AssignedInformationCollectors []NamespacedName `json:"assignedInformationCollectors,omitempty"`
	// AssignedDiagnosers is the list of diagnosers to execute diagnosing logics.
	// Diagnoses generated by the source contains predefined diagnosers.
	// +optional
	AssignedDiagnosers []NamespacedName `json:"assignedDiagnosers,omitempty"`
	// AssignedRecoverers is the list of recoverers to execute recovering logics.
	// Diagnoses generated by the source contains predefined recoverers.
	// +optional
	AssignedRecoverers []NamespacedName `json:"assignedRecoverers,omitempty"`
	// CommandExecutors is the list of commands to execute during information collecting, diagnosing
	// and recovering. Diagnoses generated by the source contains predefined command executors.
	// +optional
	CommandExecutors []CommandExecutorSpec `json:"commandExecutors,omitempty"`
	// Profilers is the list of profiler desired behaviors to be performed during information collecting,
	// diagnosing and recovering.
	// +optional
	Profilers []ProfilerSpec `json:"profilers,omitempty"`
	// Context is a blob of information about the diagnosis, meant to be user-facing
	// content and display instructions. Diagnoses generated by the source contains
	// predefined context.
	// +optional
	Context *runtime.RawExtension `json:"context,omitempty"`
}

// DiagnosisSourceStatus defines the observed state of DiagnosisSource.
type DiagnosisSourceStatus struct {
	// LastDiagnosis contains details about last diagnosis generated by the source.
	// +optional
	LastDiagnosis *metav1.ObjectMeta `json:"lastDiagnosis,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// DiagnosisSource is the Schema for the diagnosissources API.
type DiagnosisSource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DiagnosisSourceSpec   `json:"spec,omitempty"`
	Status DiagnosisSourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiagnosisSourceList contains a list of DiagnosisSource.
type DiagnosisSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiagnosisSource `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DiagnosisSource{}, &DiagnosisSourceList{})
}
