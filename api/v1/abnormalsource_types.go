/*
Copyright 2020 The Kube Diagnoser Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	"github.com/prometheus/common/model"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// AbnormalSourceSpec defines the desired state of AbnormalSource.
type AbnormalSourceSpec struct {
	// SourceTemplate is the template of abnormal source. An abnormal source generates abnormal
	// according to the template.
	SourceTemplate SourceTemplate `json:"sourceTemplate"`
	// AssignedInformationCollectors is the list of information collectors to execute
	// information collecting logics. Abnormals generated by the source contains predefined
	// information collectors.
	// +optional
	AssignedInformationCollectors []NamespacedName `json:"assignedInformationCollectors,omitempty"`
	// AssignedDiagnosers is the list of diagnosers to execute diagnosing logics.
	// Abnormals generated by the source contains predefined diagnosers.
	// +optional
	AssignedDiagnosers []NamespacedName `json:"assignedDiagnosers,omitempty"`
	// AssignedRecoverers is the list of recoverers to execute recovering logics.
	// Abnormals generated by the source contains predefined recoverers.
	// +optional
	AssignedRecoverers []NamespacedName `json:"assignedRecoverers,omitempty"`
	// CommandExecutors is the list of commands to execute during information collecting, diagnosing
	// and recovering. Abnormals generated by the source contains predefined command executors.
	// +optional
	CommandExecutors []CommandExecutorSpec `json:"commandExecutors,omitempty"`
	// Profilers is the list of profiler desired behaviors to be performed during information collecting,
	// diagnosing and recovering.
	// +optional
	Profilers []ProfilerSpec `json:"profilers,omitempty"`
	// Context is a blob of information about the abnormal, meant to be user-facing
	// content and display instructions. Abnormals generated by the source contains
	// predefined context.
	// +optional
	Context *runtime.RawExtension `json:"context,omitempty"`
}

// SourceTemplate describes the information to generate an abnormal via an abnormal source.
type SourceTemplate struct {
	// Type is the type of the source template. There are two possible type values:
	//
	// PrometheusAlert: The abnormal is generated from a prometheus alert.
	// KubernetesEvent: The abnormal is generated from a kubernetes event.
	Type AbnormalSourceType `json:"type"`
	// One and only one of the following source should be specified.
	// PrometheusAlertTemplate specifies the template to create an abnormal from a prometheus alert.
	// +optional
	PrometheusAlertTemplate *PrometheusAlertTemplate `json:"prometheusAlertTemplate,omitempty"`
	// KubernetesEventTemplate specifies the template to create an abnormal from a kubernetes event.
	// +optional
	KubernetesEventTemplate *KubernetesEventTemplate `json:"kubernetesEventTemplate,omitempty"`
}

// PrometheusAlertTemplate specifies the template to create an abnormal from a prometheus alert.
type PrometheusAlertTemplate struct {
	// Regexp is the regular expression for matching prometheus alert template.
	Regexp PrometheusAlertTemplateRegexp `json:"regexp"`
	// NodeNameReferenceLabel specifies the label for setting NodeName of generated abnormal.
	NodeNameReferenceLabel model.LabelName `json:"nodeNameReferenceLabel"`
}

// PrometheusAlertTemplateRegexp is the regular expression for matching prometheus alert template.
// All regular expressions must be in the syntax accepted by RE2 and described at https://golang.org/s/re2syntax.
type PrometheusAlertTemplateRegexp struct {
	// AlertName is the regular expression for matching "AlertName" of prometheus alert.
	// +optional
	AlertName string `json:"alertName,omitempty"`
	// Labels is the regular expression for matching "Labels" of prometheus alert.
	// Only label values are regular expressions while all label names must be identical to the
	// prometheus alert label names.
	// +optional
	Labels model.LabelSet `json:"labels,omitempty"`
	// Annotations is the regular expression for matching "Annotations" of prometheus alert.
	// Only annotation values are regular expressions while all annotation names must be identical to the
	// prometheus alert annotation names.
	// +optional
	Annotations model.LabelSet `json:"annotations,omitempty"`
	// StartsAt is the regular expression for matching "StartsAt" of prometheus alert.
	// +optional
	StartsAt string `json:"startsAt,omitempty"`
	// EndsAt is the regular expression for matching "EndsAt" of prometheus alert.
	// +optional
	EndsAt string `json:"endsAt,omitempty"`
	// GeneratorURL is the regular expression for matching "GeneratorURL" of prometheus alert.
	// +optional
	GeneratorURL string `json:"generatorURL,omitempty"`
}

// KubernetesEventTemplate specifies the template to create an abnormal from a kubernetes event.
type KubernetesEventTemplate struct {
	// Regexp is the regular expression for matching kubernetes event template.
	Regexp KubernetesEventTemplateRegexp `json:"regexp"`
}

// KubernetesEventTemplateRegexp is the regular expression for matching kubernetes event template.
// All regular expressions must be in the syntax accepted by RE2 and described at https://golang.org/s/re2syntax.
type KubernetesEventTemplateRegexp struct {
	// Name is the regular expression for matching "Name" of kubernetes event.
	// +optional
	Name string `json:"name,omitempty"`
	// Namespace is the regular expression for matching "Namespace" of kubernetes event.
	// +optional
	Namespace string `json:"namespace,omitempty"`
	// InvolvedObject is the regular expression for matching "InvolvedObject" of kubernetes event.
	// All fields of "InvolvedObject" are regular expressions.
	// +optional
	InvolvedObject corev1.ObjectReference `json:"involvedObject,omitempty"`
	// Reason is the regular expression for matching "Reason" of kubernetes event.
	// +optional
	Reason string `json:"reason,omitempty"`
	// Message is the regular expression for matching "Message" of kubernetes event.
	// +optional
	Message string `json:"message,omitempty"`
	// Source is the regular expression for matching "Source" of kubernetes event.
	// All fields of "Source" are regular expressions.
	// +optional
	Source corev1.EventSource `json:"source,omitempty"`
	// FirstTimestamp is the regular expression for matching "FirstTimestamp" of kubernetes event.
	// +optional
	FirstTimestamp string `json:"firstTimestamp,omitempty"`
	// LastTimestamp is the regular expression for matching "LastTimestamp" of kubernetes event.
	// +optional
	LastTimestamp string `json:"lastTimestamp,omitempty"`
	// Count is the regular expression for matching "Count" of kubernetes event.
	// +optional
	Count string `json:"count,omitempty"`
	// Type is the regular expression for matching "Type" of kubernetes event.
	// +optional
	Type string `json:"type,omitempty"`
	// Action is the regular expression for matching "Action" of kubernetes event.
	// +optional
	Action string `json:"action,omitempty"`
	// ReportingController is the regular expression for matching "ReportingController" of kubernetes event.
	// +optional
	ReportingController string `json:"reportingController,omitempty"`
	// ReportingInstance is the regular expression for matching "ReportingInstance" of kubernetes event.
	// +optional
	ReportingInstance string `json:"reportingInstance,omitempty"`
}

// AbnormalSourceStatus defines the observed state of AbnormalSource.
type AbnormalSourceStatus struct {
	// LastAbnormal contains details about last abnormal generated by the source.
	// +optional
	LastAbnormal *metav1.ObjectMeta `json:"lastAbnormal,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// AbnormalSource is the Schema for the abnormalsources API.
type AbnormalSource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AbnormalSourceSpec   `json:"spec,omitempty"`
	Status AbnormalSourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AbnormalSourceList contains a list of AbnormalSource.
type AbnormalSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AbnormalSource `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AbnormalSource{}, &AbnormalSourceList{})
}
